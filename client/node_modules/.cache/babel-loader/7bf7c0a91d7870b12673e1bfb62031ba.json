{"ast":null,"code":"import _regeneratorRuntime from \"/Users/prabhueshwarla/ethereum/teach/OSI2019-Blockchain/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/prabhueshwarla/ethereum/teach/OSI2019-Blockchain/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/prabhueshwarla/ethereum/teach/OSI2019-Blockchain/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/prabhueshwarla/ethereum/teach/OSI2019-Blockchain/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/prabhueshwarla/ethereum/teach/OSI2019-Blockchain/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/prabhueshwarla/ethereum/teach/OSI2019-Blockchain/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/prabhueshwarla/ethereum/teach/OSI2019-Blockchain/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/prabhueshwarla/ethereum/teach/OSI2019-Blockchain/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3, accounts, networkId, deployedNetwork, instance;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return getWeb3();\n\n            case 3:\n              web3 = _context.sent;\n              _context.next = 6;\n              return web3.eth.getAccounts();\n\n            case 6:\n              accounts = _context.sent;\n              _context.next = 9;\n              return web3.eth.net.getId();\n\n            case 9:\n              networkId = _context.sent;\n              deployedNetwork = SimpleStorageContract.networks[networkId];\n              instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n              // example of interacting with the contract's methods.\n\n              _this.setState({\n                web3: web3,\n                accounts: accounts,\n                contract: instance\n              }, _this.runExample);\n\n              _context.next = 19;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](0);\n              // Catch any errors for any of the above operations.\n              alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n              console.error(_context.t0);\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 15]]);\n    }));\n    _this.runExample =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var _this$state, accounts, contract, response;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$state = _this.state, accounts = _this$state.accounts, contract = _this$state.contract; // Stores a given value, 5 by default.\n              //await this.state.contract.methods.set(8).send({ from: this.state.accounts[0] });\n              // Get the value from the contract to prove it worked.\n\n              _context2.next = 3;\n              return contract.methods.verifyCert().call(9845298452);\n\n            case 3:\n              response = _context2.sent;\n\n              // Update state with the result.\n              _this.setState({\n                storageValue: response,\n                name: response.name\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n    _this.state = {\n      name: null,\n      conf: null,\n      details: null,\n      issuedBy: null,\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n\n    /*handleSubmit(event) {\n      alert('A name was submitted: ' + this.state.value);\n      event.preventDefault();\n    }\n    handleChange(event) {\n      this.setState({storageValue: event.target.value});\n      console.log(\"Prabhu\", event.target);\n      this.state.contract.methods.set(this.state.value).send({ from: this.state.accounts[0] });\n        // Get the value from the contract to prove it worked.\n        const response = this.state.contract.methods.get().call();\n         // Update state with the result.\n        this.setState({ storageValue: response });\n    }*/\n    value: function render() {\n      if (!this.state.web3) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, \"Loading Web3, accounts, and contract...\");\n      }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Welcome to OSI2019 Blockchain workshop!\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"This is your first DApp.\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Smart Contract Example to store your conference participation record\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"If your contracts compiled and migrated successfully, below will show a stored value of attendee Prabhu (by default).\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Try changing the value stored on \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"line 40\"), \" of App.js.\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"The stored value is: \", this.state.name));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/prabhueshwarla/ethereum/teach/OSI2019-Blockchain/client/src/App.js"],"names":["React","Component","SimpleStorageContract","getWeb3","App","props","componentDidMount","web3","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","networks","instance","Contract","abi","address","setState","contract","runExample","alert","console","error","state","methods","verifyCert","call","response","storageValue","name","conf","details","issuedBy"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: null, conf: null, details: null, issuedBy: null, storageValue: 0, web3: null, accounts: null, contract: null };\n  }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    //await this.state.contract.methods.set(8).send({ from: this.state.accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.verifyCert().call(9845298452);\n\n    // Update state with the result.\n    this.setState({ storageValue: response, name: response.name  });\n  };\n  /*handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.value);\n    event.preventDefault();\n  }\n  handleChange(event) {\n    this.setState({storageValue: event.target.value});\n    console.log(\"Prabhu\", event.target);\n    this.state.contract.methods.set(this.state.value).send({ from: this.state.accounts[0] });\n      // Get the value from the contract to prove it worked.\n      const response = this.state.contract.methods.get().call();\n\n      // Update state with the result.\n      this.setState({ storageValue: response });\n  }*/\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>Welcome to OSI2019 Blockchain workshop!</h1>\n        <p>This is your first DApp.</p>\n        <h2>Smart Contract Example to store your conference participation record</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of attendee Prabhu (by default).\n        </p>\n     {/*\n        <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n     </form> */}\n        <p>\n          Try changing the value stored on <strong>line 40</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.name}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}